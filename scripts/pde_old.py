from numpy import sqrt, loadtxt, unique, mean, arctan, sin
from pedestal_prop_time import extract_file

def calculate_pde(A_1, A_2, B_1, B_2, pde_pmt, dark_count):
    factor = (A_1 - dark_count) * (A_2 - dark_count)/ B_1 / B_2
    return sqrt(factor) * pde_pmt

def get_pde(fileprefix, pde_pmt, dark_count=0.45):
    #0.47 is  the number of photons generated by dark counts.
    #they must be subscracted from the signal
    data, dates = extract_file(fileprefix + '_1')
    sipm1, sipm1_err, pmt1, pmt1_err = data

    data, dates = extract_file(fileprefix + '_2')
    sipm2, sipm2_err, pmt2, pmt2_err = data

    return calculate_pde(sipm1, sipm2, pmt1, pmt2, pde_pmt, dark_count)

def extract_pde_data(filename):
    data = loadtxt(filename, unpack=True, usecols=range(3))
    wavelengths_, pde_, errors_ = data

    wavelengths = unique(wavelengths_)
    pde = [mean_pde(i, wavelengths_, pde_) for i in wavelengths]
    errors = [err_of_wl(i, wavelengths_, errors_) for i in wavelengths]
    wavelengths = [correct_wavelength(i) for i in wavelengths]

    return wavelengths, pde, errors

def mean_pde(wavelength, wavelengths, pde):
    return mean([pde[i] for i, j in enumerate(wavelengths) if j == wavelength])

def err_of_wl(wavelength, wavelengths, errors):
    return [errors[i] for i, j in enumerate(wavelengths) if j == wavelength][0]

def correct_wavelength(wavelength):
    angle = arctan(.75 / 3)
    #given by the manufacturor of the ir-filters
    k = 0.11
    factor = 1 - k * sin(angle) * sin(angle)

    return wavelength * factor


